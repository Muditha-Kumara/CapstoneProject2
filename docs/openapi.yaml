openapi: 3.0.3
info:
  title: NourishNet API
  description: API specification for user management and request/donation flows
  version: 1.0.0
  contact:
    name: Backend Team
    email: backend@example.com
servers:
  - url: http://localhost:5000/api
    description: Local development server (host access)
  - url: http://backend:5000/api
    description: Docker Compose internal network
security:
  - bearerAuth: []
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        role:
          type: string
      required:
        - id
        - name
        - email
    Request:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        type:
          type: string
        status:
          type: string
      required:
        - id
        - userId
        - type
    Donation:
      type: object
      properties:
        id:
          type: integer
        donorId:
          type: integer
        amount:
          type: number
        status:
          type: string
      required:
        - id
        - donorId
        - amount
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message
    AuthLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    AuthRegister:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
      required:
        - name
        - email
        - password
        - role
    AuthResetPassword:
      type: object
      properties:
        email:
          type: string
      required:
        - email
    FoodProvider:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string
        address:
          type: string
        gpsLocation:
          type: string
        contactInfo:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - name
    Order:
      type: object
      properties:
        id:
          type: integer
        requestId:
          type: integer
        donationId:
          type: integer
        address:
          type: string
        gpsLocation:
          type: string
        status:
          type: string
        fulfilledAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - requestId
        - donationId
        - status
    OrderFeedback:
      type: object
      properties:
        id:
          type: integer
        orderId:
          type: integer
        userId:
          type: integer
        rating:
          type: integer
        feedback:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - orderId
        - userId
        - rating
    Transaction:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        type:
          type: string
        amount:
          type: number
        description:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - userId
        - type
        - amount
    Chat:
      type: object
      properties:
        id:
          type: integer
        participants:
          type: array
          items:
            type: integer
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - participants
    Message:
      type: object
      properties:
        id:
          type: integer
        chatId:
          type: integer
        senderId:
          type: integer
        content:
          type: string
        sentAt:
          type: string
          format: date-time
      required:
        - id
        - chatId
        - senderId
        - content

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegister'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      responses:
        '204':
          description: Logout successful

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthResetPassword'
      responses:
        '200':
          description: Password reset email sent
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    get:
      tags:
        - User Management
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    - id: 1
                      name: John Doe
                      email: john@example.com
                      role: user
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                example:
                  value:
                    code: 401
                    message: Unauthorized
    post:
      tags:
        - User Management
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example:
                value:
                  name: Jane Doe
                  email: jane@example.com
                  role: user
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/me:
    get:
      tags:
        - User Management
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      tags:
        - User Management
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - User Management
      summary: Update user info
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - User Management
      summary: Delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /requests:
    get:
      tags:
        - Request Flow
      summary: Get all requests
      responses:
        '200':
          description: List of requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
    post:
      tags:
        - Request Flow
      summary: Create a new request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '201':
          description: Request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
  /donations:
    get:
      tags:
        - Donation Flow
      summary: Get all donations
      responses:
        '200':
          description: List of donations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Donation'
    post:
      tags:
        - Donation Flow
      summary: Create a new donation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donation'
      responses:
        '201':
          description: Donation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Donation'
  /food-providers:
    get:
      tags:
        - Food Provider Management
      summary: List all food providers
      responses:
        '200':
          description: List of food providers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodProvider'
    post:
      tags:
        - Food Provider Management
      summary: Register new food provider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodProvider'
      responses:
        '201':
          description: Food provider registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodProvider'
  /food-providers/{id}:
    get:
      tags:
        - Food Provider Management
      summary: Get food provider details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Food provider details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodProvider'
        '404':
          description: Not found
    patch:
      tags:
        - Food Provider Management
      summary: Update food provider info
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodProvider'
      responses:
        '200':
          description: Food provider updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodProvider'
        '404':
          description: Not found

  /orders:
    get:
      tags:
        - Order Management
      summary: List all orders
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
    post:
      tags:
        - Order Management
      summary: Create new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
  /orders/{id}:
    get:
      tags:
        - Order Management
      summary: Get order details
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not found
    patch:
      tags:
        - Order Management
      summary: Update order status
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Not found

  /orders/{id}/feedback:
    post:
      tags:
        - Order Feedback
      summary: Submit feedback for an order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderFeedback'
      responses:
        '201':
          description: Feedback submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderFeedback'
    get:
      tags:
        - Order Feedback
      summary: Get feedback for an order
      responses:
        '200':
          description: Feedback for order
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderFeedback'

  /transactions:
    get:
      tags:
        - Transactions
      summary: List user transactions
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
    post:
      tags:
        - Transactions
      summary: Create a transaction
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '201':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
  /users/{id}/balance:
    get:
      tags:
        - Transactions
      summary: Get user balance
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number

  /uploads/order-photo:
    post:
      tags:
        - File Uploads
      summary: Upload order completion photo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Photo uploaded
  /uploads/provider-photo:
    post:
      tags:
        - File Uploads
      summary: Upload provider verification photo
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Photo uploaded

  /chats:
    get:
      tags:
        - Chat
      summary: List user chats
      responses:
        '200':
          description: List of chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
    post:
      tags:
        - Chat
      summary: Start a chat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participants:
                  type: array
                  items:
                    type: integer
      responses:
        '201':
          description: Chat started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
  /chats/{id}/messages:
    get:
      tags:
        - Chat
      summary: Get messages in a chat
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      tags:
        - Chat
      summary: Send a message
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'

  /admin/users:
    get:
      tags:
        - Admin
      summary: List all users (admin)
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /admin/users/{id}/role:
    patch:
      tags:
        - Admin
      summary: Change user role
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: string
      responses:
        '200':
          description: User role updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /admin/overview:
    get:
      tags:
        - Admin
      summary: System stats overview
      responses:
        '200':
          description: System stats
          content:
            application/json:
              schema:
                type: object
                properties:
                  userCount:
                    type: integer
                  orderCount:
                    type: integer
                  donationCount:
                    type: integer
