name: NourishNet CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Testing and Build
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: nourishnet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/backend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/nourishnet_test
        JWT_SECRET: test-jwt-secret-for-ci-cd-pipeline
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/nourishnet_test
        JWT_SECRET: test-jwt-secret-for-ci-cd-pipeline
        REDIS_HOST: localhost
        REDIS_PORT: 6379

    - name: Generate test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/nourishnet_test
        JWT_SECRET: test-jwt-secret-for-ci-cd-pipeline

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src/backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Testing and Build
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src/frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: src/frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:unit -- --coverage --watchAll=false
      env:
        CI: true
        REACT_APP_API_URL: http://localhost:5000/api

    - name: Build production bundle
      run: npm run build
      env:
        REACT_APP_API_URL: https://api.nourishnet.org/api
        GENERATE_SOURCEMAP: false

    - name: Test production build
      run: |
        npm install -g serve
        serve -s build -p 3000 &
        sleep 10
        curl -f http://localhost:3000 || exit 1

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: src/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # End-to-End Testing
  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Start application stack
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30

    - name: Wait for services to be ready
      run: |
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:5000/api/health
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3000

    - name: Run E2E tests
      run: |
        cd tests/e2e
        npm ci
        npm run test:e2e

    - name: Upload E2E test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-screenshots
        path: tests/e2e/screenshots/

    - name: Stop application stack
      run: docker-compose -f docker-compose.test.yml down

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit (Backend)
      run: |
        cd src/backend
        npm audit --audit-level moderate

    - name: Run npm audit (Frontend)
      run: |
        cd src/frontend
        npm audit --audit-level moderate

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Start application stack
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 60

    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli@0.12.x
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

    - name: Run load tests
      run: |
        cd tests/performance
        npm ci
        npm run test:load

    - name: Stop application stack
      run: docker-compose -f docker-compose.test.yml down

  # Build and Push Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security-scan]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          nourishnet/backend
          nourishnet/frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: src/backend
        push: true
        tags: nourishnet/backend:${{ github.sha }},nourishnet/backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: src/frontend
        push: true
        tags: nourishnet/frontend:${{ github.sha }},nourishnet/frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, e2e-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here
        # This could be AWS ECS, Kubernetes, or other deployment targets

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, e2e-test, performance-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
        # This should include database migrations, health checks, etc.

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "üéâ Deployment successful!"
        # Add Slack/Discord notification here

    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        # Add Slack/Discord notification here
